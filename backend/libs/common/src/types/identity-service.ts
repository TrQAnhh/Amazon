// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: proto/identity-service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'auth';

export enum UserRole {
  USER = 0,
  ADMIN = 1,
  UNRECOGNIZED = -1,
}

export interface SignUpDto {
  email: string;
  password: string;
}

export interface SignInDto {
  email: string;
  password: string;
}

export interface AuthResponse {
  message: string;
  accessToken: string;
  refreshToken: string;
}

export const AUTH_PACKAGE_NAME = 'auth';

export interface IdentityServiceClient {
  signUp(request: SignUpDto): Observable<AuthResponse>;

  signIn(request: SignInDto): Observable<AuthResponse>;
}

export interface IdentityServiceController {
  signUp(
    request: SignUpDto,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  signIn(
    request: SignInDto,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;
}

export function IdentityServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['signUp', 'signIn'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('IdentityService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('IdentityService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const IDENTITY_SERVICE_NAME = 'IdentityService';
